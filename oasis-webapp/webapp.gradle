plugins {
  id("java")
  id("idea")
}

dependencies {
  compile(project(":oasis-model"))
  compile(libs.log4j2)
  compile(libs.jsr305)
  compile(libs.guava)
  compile(libs.bouncycastle)
  compile(libs.guice)
  compile(libs.jongo)
  compile(libs.jose4j)
  compile(libs.elasticsearch)
  compile(libs.icu4j)
  compile(libs.galimatias)
  compile(libs.mail)
  compile(libs.jackson)
  compile(libs.args4j)
  compile(libs.config)
  compile(libs.resteasy_netty)
  compile(libs.resteasy_client)
  compile(libs.jaxrs_webhook)
  compile(libs.closure_templates)

  runtime(libs.jsSHA)

  compileOnly(libs.immutables_annotations)
  testCompileOnly(libs.immutables_annotations)
  annotationProcessor(libs.immutables)

  compile(libs.slf4j)
  runtime(libs.log4j_runtime)

  compileOnly(libs.forbiddenapis)
  testCompileOnly(libs.forbiddenapis)

  testCompile(libs.junit)
  testCompile(libs.mockito)
  testCompile(libs.jukito)
  testCompile(libs.assertj)
  testCompile(libs.resteasy_testing)
}

tasks.named("processResources").configure {
  inputs.file("src/main/ozwillo-style/favicons/snippet_head_for_favicons.html")
      .withPathSensitivity(PathSensitivity.NONE)

  from("src/main/ozwillo-style/favicons") {
    exclude("**/*.html")
    rename { file -> "oasis-ui/" + file }
  }
  filesMatching("**/Common.soy") {
    filter { line ->
      if (line.trim() == "/* BUILD WILL INSERT FAVICONS SNIPPET HERE */") {
        line = file("src/main/ozwillo-style/favicons/snippet_head_for_favicons.html").text
      }
      return line
    }
  }
}

configurations {
  soy
}
dependencies {
  soy(libs.closure_templates_standalone)
}
ext.generateSoyParseInfoOutputDir = "$buildDir/generated/source/soy/"
tasks.register("generateSoyParseInfo", JavaExec) {
  def srcs = sourceSets.main.resources.matching {
    include "**/*.soy"
    exclude "**/Common.soy"
  }
  def deps = sourceSets.main.resources.matching {
    include "**/Common.soy"
  }
  inputs.files(srcs).skipWhenEmpty()
  inputs.files(deps)

  outputs.dir(generateSoyParseInfoOutputDir)

  doFirst {
    project.delete(generateSoyParseInfoOutputDir)
  }

  def javaPackage = "oasis.soy.templates"

  main = "com.google.template.soy.SoyParseInfoGenerator"
  classpath = configurations.soy
  args = [
      "--javaPackage",          javaPackage,
      "--javaClassNameSource",  "filename",
      "--outputDirectory",      "$generateSoyParseInfoOutputDir/${javaPackage.replace(".", "/")}/",
      "--srcs",                 srcs.files.join(","),
      "--deps",                 deps.files.join(","),
      "--allowExternalCalls",   "false",
    ]
}
sourceSets.main.java {
  srcDir(generateSoyParseInfoOutputDir)
}
tasks.named("compileJava").configure { dependsOn("generateSoyParseInfo") }
idea {
  module {
    generatedSourceDirs += file(generateSoyParseInfoOutputDir)
  }
}
project.afterEvaluate {
  licenseMain {
    source = sourceSets.main.allSource.minus(fileTree(generateSoyParseInfoOutputDir))
  }
}

tasks.register("run", JavaExec) {
  dependsOn("classes")

  main = "oasis.web.WebApp"
  classpath = sourceSets.main.runtimeClasspath
  systemProperties = System.getProperties().findAll { it.key.startsWith("oasis.") } \
      + [ "oasis.conf-dir": "${buildDir}" ]
  args = [
      "-c", "${rootDir}/dev.conf",
      "-l", "${rootDir}/log4j2-dev.xml",
    ]
}

tasks.register("bootstrap", JavaExec) {
  dependsOn("classes")

  main = "oasis.tools.Bootstrap"
  classpath = sourceSets.main.runtimeClasspath
  systemProperties = System.getProperties().findAll { it.key.startsWith("oasis.") } \
      + [ "oasis.conf-dir": "${buildDir}" ]
  args = [
      "-c",                         "${rootDir}/dev.conf",
      "-l",                         "${rootDir}/log4j2-dev.xml",
      "--admin",                    "localdev@ozwillo.com",
      "--password",                 "admin",
      "--redirect-uri",             "http://localhost:8081/callback",
      "--post-logout-redirect-uri", "http://localhost:8081/",
    ]
}

tasks.register("setPassword", JavaExec) {
  dependsOn("classes")

  main = "oasis.tools.SetPassword"
  classpath = sourceSets.main.runtimeClasspath
  systemProperties = System.getProperties().findAll { it.key.startsWith("oasis.") } \
      + [ "oasis.conf-dir": "${buildDir}" ]
  args = [
      "-c",              "${rootDir}/dev.conf",
      "-l",              "${rootDir}/log4j2-dev.xml",
    ]
  if (project.hasProperty("dryRun")) {
    args("--dry-run")
  }

  doFirst {
    if (!project.hasProperty("clientType")) {
      logger.error("property 'clientType' is mandatory for $name;\ninvoke as ./gradlew -PclientType=...")
    }
    if (!project.hasProperty("clientId")) {
      logger.error("property 'clientId' is mandatory for $name;\ninvoke as ./gradlew -PclientId=...")
    }
    if (!project.hasProperty("clientSecret")) {
      logger.error("property 'clientSecret' is mandatory for $name;\ninvoke as ./gradlew -PclientSecret=...")
    }

    args += [
        "--type",          project.findProperty("clientType"),
        "--client-id",     project.findProperty("clientId"),
        "--client-secret", project.findProperty("clientSecret"),
      ]
  }
}

tasks.register("extractMessagesFromTemplates", JavaExec) {
  def srcs = sourceSets.main.resources.matching {
    include("**/*.soy")
  }
  inputs.files(srcs).skipWhenEmpty()

  main = "com.google.template.soy.SoyMsgExtractor"
  classpath = configurations.soy
  args = [
      "--allowExternalCalls",   "false",
      "--srcs",                 srcs.files.join(","),
      "--sourceLocaleString",   "en-GB"
    ]
  if (project.hasProperty("outputFile")) {
    args += ["--outputFile", project.outputFile]
  }
  if (project.hasProperty("targetLocaleString")) {
    args += ["--targetLocaleString", project.targetLocaleString]
  }

  // Provide Gradle-specific error reporting in addition to the SoyMsgExtractor usage
  doFirst {
    if (!project.hasProperty("outputFile")) {
      logger.error("property 'outputFile' is mandatory for $name;\ninvoke as ./gradlew -PoutputFile=...")
    }
    if (!project.hasProperty("targetLocaleString")) {
      logger.info("You should provide property 'targetLocaleString' for $name;\ninvoke as ./gradlew -PtargetLocaleString=...")
    }
  }
}

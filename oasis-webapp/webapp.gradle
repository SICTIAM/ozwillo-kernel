apply plugin: 'java'

dependencies {
  compile project(':oasis-model')
  compile libs.log4j2
  compile libs.jsr305
  compile libs.guava
  compile libs.bouncycastle
  compile libs.google_oauth_client
  compile libs.google_http_client
  compile libs.guice
  compile libs.jongo
  compile libs.elasticsearch
  compile libs.joda_time
  compile libs.icu4j
  compile libs.galimatias
  compile libs.mail
  compile libs.jackson
  compile libs.args4j
  compile libs.config
  compile libs.resteasy_netty
  compile libs.resteasy_client
  compile libs.okhttp
  compile libs.closure_templates
  compile libs.swagger_jaxrs

  compile libs.immutables
  apt libs.immutables_compiler

  compile libs.slf4j
  runtime libs.log4j_runtime

  runtime libs.swagger_ui

  testCompile libs.junit
  testCompile libs.mockito
  testCompile libs.jukito
  testCompile libs.assertj
  testCompile libs.okhttp_mockserver
}

configurations {
  soy
}
dependencies {
  soy libs.closure_templates_standalone
}
task generateSoyParseInfo(type: JavaExec) {
  def srcs = sourceSets.main.resources.matching {
    include '**/*.soy'
    exclude '**/Common.soy'
  }
  def deps = sourceSets.main.resources.matching {
    include '**/Common.soy'
  }
  inputs.source srcs
  inputs.files deps

  ext.outputDir = "$buildDir/generated-sources/soy/"
  outputs.dir outputDir

  doFirst {
    project.delete(outputDir)
  }

  def javaPackage = 'oasis.soy.templates'

  main = 'com.google.template.soy.SoyParseInfoGenerator'
  classpath = configurations.soy
  args = [
      '--javaPackage',          javaPackage,
      '--javaClassNameSource',  'filename',
      '--outputDirectory',      "$outputDir/${javaPackage.replace('.', '/')}/",
      '--srcs',                 srcs.files.join(','),
      '--deps',                 deps.files.join(','),
    ]
}
sourceSets.main.java {
  srcDir generateSoyParseInfo.outputDir
}
compileJava.dependsOn generateSoyParseInfo
licenseMain {
  source = sourceSets.main.allSource.minus(fileTree(generateSoyParseInfo.outputDir))
}

task run(type: JavaExec, dependsOn: classes) {
  main = 'oasis.web.WebApp'
  classpath = sourceSets.main.runtimeClasspath
  systemProperties = System.getProperties()
}

task extractMessagesFromTemplates(type: JavaExec) {
  def srcs = sourceSets.main.resources.matching {
    include '**/*.soy'
  }
  inputs.source srcs

  main = 'com.google.template.soy.SoyMsgExtractor'
  classpath = configurations.soy
  args = [
      '--allowExternalCalls',   'false',
      '--srcs',                 srcs.files.join(','),
      '--sourceLocaleString',   'en-GB'
    ]
  if (project.hasProperty("outputFile")) {
    args += ['--outputFile', project.outputFile]
  }
  if (project.hasProperty("targetLocaleString")) {
    args += ['--targetLocaleString', project.targetLocaleString]
  }

  // Provide Gradle-specific error reporting in addition to the SoyMsgExtractor usage
  doFirst {
    if (!project.hasProperty("outputFile")) {
      logger.error("property 'outputFile' is mandatory for $name;\ninvoke as ./gradlew -PoutputFile=...")
    }
    if (!project.hasProperty("targetLocaleString")) {
      logger.info("You should provide property 'targetLocaleString' for $name;\ninvoke as ./gradlew -PtargetLocaleString=...")
    }
  }
}

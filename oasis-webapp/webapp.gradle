apply plugin: 'java'
apply plugin: 'idea' // IDEA needs extra configuration for generated sources *sigh*

dependencies {
  compile project(':oasis-model')
  compile project(':log4j2-cube')
  compile project(':log4j2-fluentd')
  compile project(':log4j2-logstash')
  compile libs.jsr305
  compile libs.guava
  compile libs.bouncycastle
  compile libs.google_oauth_client
  compile libs.google_http_client
  compile libs.guice
  compile libs.jongo
  compile libs.joda_time
  compile libs.galimatias
  compile libs.mail
  compile libs.jackson
  compile libs.args4j
  compile libs.config
  compile libs.resteasy_netty
  compile libs.closure_templates
  compile libs.swagger_jaxrs

  compile libs.slf4j
  runtime libs.log4j_runtime

  runtime libs.swagger_ui

  testCompile libs.junit
  testCompile libs.mockito
  testCompile libs.jukito
  testCompile libs.assertj
}

sourceSets.main.resources {
  source sourceSets.main.java
}

configurations {
  soy
}
dependencies {
  soy libs.closure_templates_standalone
}
task generateSoyParseInfo(type: JavaExec) {
  def srcs = sourceSets.main.resources.matching {
    include '**/*.soy'
    exclude '**/Common.soy'
  }
  def deps = sourceSets.main.resources.matching {
    include '**/Common.soy'
  }
  inputs.source srcs
  inputs.files deps

  ext.outputDir = "$buildDir/generated-sources/soy/"
  outputs.dir outputDir

  def javaPackage = 'oasis.soy.templates'

  main = 'com.google.template.soy.SoyParseInfoGenerator'
  classpath = configurations.soy
  args = [
      '--javaPackage',          javaPackage,
      '--javaClassNameSource',  'filename',
      '--outputDirectory',      "$outputDir/${javaPackage.replace('.', '/')}/",
      '--srcs',                 srcs.files.join(','),
      '--deps',                 deps.files.join(','),
    ]
}
sourceSets.main.java {
  srcDir generateSoyParseInfo.outputDir
}
compileJava.dependsOn generateSoyParseInfo
idea {
  module {
    // un-exclude $buildDir, then exclude all non-'generated-sources' subdir of $buildDir
    excludeDirs -= file(buildDir)
    buildDir.listFiles({ d , f -> f != 'generated-sources' } as FilenameFilter).each { excludeDirs += it }
  }
}

task run(type: JavaExec, dependsOn: classes) {
  main = 'oasis.web.WebApp'
  classpath = sourceSets.main.runtimeClasspath
  systemProperties = System.getProperties()
}

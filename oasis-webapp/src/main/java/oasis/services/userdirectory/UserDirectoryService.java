package oasis.services.userdirectory;

import javax.inject.Inject;

import org.joda.time.LocalDate;

import com.google.common.base.Function;
import com.google.common.collect.Iterables;

import oasis.jongo.social.JongoIdentity;
import oasis.model.InvalidVersionException;
import oasis.model.accounts.AccountRepository;
import oasis.model.accounts.UserAccount;
import oasis.model.directory.OrganizationMembership;
import oasis.model.directory.OrganizationMembershipRepository;
import oasis.model.social.Address;
import oasis.model.social.Identity;
import oasis.model.social.IdentityRepository;

public class UserDirectoryService {

  private final IdentityRepository identityRepository;
  private final AccountRepository accountRepository;
  private final OrganizationMembershipRepository organizationMemberRepository;

  @Inject
  UserDirectoryService(IdentityRepository identityRepository, AccountRepository accountRepository,
      OrganizationMembershipRepository organizationMemberRepository) {
    this.identityRepository = identityRepository;
    this.accountRepository = accountRepository;
    this.organizationMemberRepository = organizationMemberRepository;
  }

  public AgentInfo getAgentInfo(String agentId) {
    UserAccount agent = accountRepository.getUserAccountById(agentId);
    Identity identity = null;
    if (agent.getIdentityId() != null) {
      identity = identityRepository.getIdentity(agent.getIdentityId());
    }
    OrganizationMembership membership = organizationMemberRepository.getOrganizationForUserIfUnique(agentId);
    return new AgentInfo(agent, identity, membership);
  }

  public Iterable<AgentInfo> getAgentsForOrganization(String organizationId, int start, int limit) {
    Iterable<OrganizationMembership> memberships = organizationMemberRepository.getMembersOfOrganization(organizationId, start, limit);
    return Iterables.transform(memberships, new Function<OrganizationMembership, AgentInfo>() {
      @Override
      public AgentInfo apply(OrganizationMembership membership) {
        return getAgentInfo(membership.getAccountId());
      }
    });
  }

  public AgentInfo createAgentAccount(String organizationId, AgentInfo agentInfo) {
    Identity identity = createIdentity(agentInfo);
    JongoIdentity createdIdentity = null;
    if (identity != null) {
      createdIdentity = (JongoIdentity) identityRepository.createIdentity(identity);
      if (createdIdentity == null) {
        return null;
      }
    }

    UserAccount agent = createUserAccount(agentInfo);
    agent.setIdentityId(createdIdentity.getId());
    UserAccount createdAgentAccount = accountRepository.createUserAccount(agent);

    if (createdAgentAccount == null) {
      // delete identity
      boolean deleted = identityRepository.deleteIdentity(createdIdentity.getId());
      if (!deleted) {
        // XXX: Identity does not exist, someone removed it for me. No matter, the job is done.
      }
    }

    OrganizationMembership membership = new OrganizationMembership();
    membership.setAccountId(agent.getId());
    membership.setOrganizationId(agentInfo.getOrganization_id());
    membership.setAdmin(agentInfo.isOrganization_admin() == null ? false : agentInfo.isOrganization_admin());
    OrganizationMembership createdMembership = organizationMemberRepository.createOrganizationMembership(membership);
    // TODO: handle errors

    return new AgentInfo(createdAgentAccount, createdIdentity, createdMembership);
  }

  private UserAccount createUserAccount(AgentInfo agentInfo) {
    UserAccount res = new UserAccount();

    // XXX: don't copy the ID, it should be generated by the repository, not provided by the caller of the API
    res.setModified(agentInfo.getModified());

    res.setPicture(agentInfo.getPicture());
    res.setZoneInfo(agentInfo.getZoneinfo());
    res.setLocale(agentInfo.getLocale());
    res.setEmailAddress(agentInfo.getEmail());

    return res;
  }

  private Identity createIdentity(AgentInfo agentInfo) {
    Identity res = new Identity();

    // Address
    if (agentInfo.getAddress() != null) {
      Address address = new Address();
      address.setCountry(agentInfo.getAddress().getCountry());
      address.setLocality(agentInfo.getAddress().getLocality());
      address.setPostalCode(agentInfo.getAddress().getPostal_code());
      address.setRegion(agentInfo.getAddress().getRegion());
      address.setStreetAddress(agentInfo.getAddress().getStreet_address());
      res.setAddress(address);
    }

    res.setName(agentInfo.getName());
    res.setFamilyName(agentInfo.getFamily_name());
    res.setGivenName(agentInfo.getGiven_name());
    res.setNickname(agentInfo.getNickname());
    res.setMiddleName(agentInfo.getMiddle_name());
    res.setGender(agentInfo.getGender());
    if (agentInfo.getBirthdate() != null) {
      res.setBirthdate(LocalDate.parse(agentInfo.getBirthdate()));
    }
    res.setPhoneNumber(agentInfo.getPhone());
    res.setPhoneNumberVerified(agentInfo.isPhone_verified() == null ? false : agentInfo.isPhone_verified());
    res.setUpdatedAt(agentInfo.getUpdated_at() == null ? 0 : agentInfo.getUpdated_at());

    return res;
  }
}
